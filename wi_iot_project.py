# -*- coding: utf-8 -*-
"""WI-IoT-Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sz4H7CZ1OEjQwVsQabUYxyGyE0WDw3QZ

# **Data Processing**
"""

import pandas as pd
import numpy as np
fp_ds = pd.read_csv('/content/fp_ds.csv')
fp_ds

"""***Estimating missing RSSI values (odd rows and columns)*** """

#Creating  RSSI even super row vectors (each row vector comprises of the vectors of positions of that row)
row0 = fp_ds.loc[fp_ds['x'] == 0]
row0 = row0.drop(columns = ['x','y']);
row0 = row0.values.reshape(-1)

row2 = fp_ds.loc[fp_ds['x'] == 2]
row2 = row2.drop(columns = ['x','y']);
row2 = row2.values.reshape(-1)

row4 = fp_ds.loc[fp_ds['x'] == 4]
row4 = row4.drop(columns = ['x','y']);
row4 = row4.values.reshape(-1)

row6 = fp_ds.loc[fp_ds['x'] == 6]
row6 = row6.drop(columns = ['x','y']);
row6 = row6.values.reshape(-1)

row8 = fp_ds.loc[fp_ds['x'] == 8]
row8 = row8.drop(columns = ['x','y']);
row8 = row8.values.reshape(-1)

row10 = fp_ds.loc[fp_ds['x'] == 10]
row10 = row10.drop(columns = ['x','y']);
row10 = row10.values.reshape(-1)

#Estimating RSSI odd super row vectors 
row1 =(row0+row2)/2
row3 =(row2+row4)/2
row5 =(row4+row6)/2
row7 =(row6+row8)/2
row9 =(row8+row10)/2

row_array = np.stack((row0,row1,row2,row3,row4,row5,row6,row7,row8,row9,row10))
row_array.shape

#extracting Colunms super vectors

col0 = row_array[:, 0:30]                  
col1 = row_array[:, 30:60]
col2 = row_array[:, 60:90]
col3 = row_array[:, 90:120]
col4 = row_array[:, 120:150]
col5 = row_array[:, 150:180]
col6 = row_array[:, 180:210]
col7 = row_array[:, 210:240]
col8 = row_array[:, 240:270]
col9 = row_array[:, 270:300]
col10 = row_array[:, 300:330]


#Estimating RSSIs corresponding to odd super Colunms vectors 
col1 = (col0+col2)/2
col3 = (col2+col4)/2
col5 = (col4+col6)/2
col7 = (col6+col8)/2
col9 = (col8+col10)/2

final_estimated_fp_ds = np.concatenate((col0,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10), axis=0)

final_estimated_fp_ds

#extracting column headers(to use later in final_estimated_fp_ds )
column_headers =[]
for col in fp_ds.columns:
  column_headers.append(col)
  
column_headers.remove('x')
column_headers.remove('y')
print(column_headers)

#Converting final_estimated_fp_ds from numpy to DataFrame
final_estimated_fp_ds = pd.DataFrame(final_estimated_fp_ds, columns=column_headers)

#adding corresponding position columns
extracted_col_x = fp_ds['x']
extracted_col_y = fp_ds['y']

final_estimated_fp_ds = final_estimated_fp_ds.join(extracted_col_x)
final_estimated_fp_ds = final_estimated_fp_ds.join(extracted_col_y)

#mapping 2d points to 1d indices  
final_estimated_fp_ds['index'] = range(0, len(final_estimated_fp_ds))
col_index = final_estimated_fp_ds.pop('index')
final_estimated_fp_ds.insert(0, col_index.name, col_index)

final_estimated_fp_ds

"""***Creating the final Fingerprint Dataset***"""

#converting RSSI vector of positions with dimentionality of 1*30 to vectors of 1*6 by performing max or mean or min based on the chosen flag 
max = False
mean = True
min = False
if(max == True):
  final_estimated_fp_ds['rssa1'] = final_estimated_fp_ds[['rssa11','rssa12','rssa13','rssa14','rssa15',]].max(axis=1)
  final_estimated_fp_ds['rssa2'] = final_estimated_fp_ds[['rssa21','rssa22','rssa23','rssa24','rssa25',]].max(axis=1)
  final_estimated_fp_ds['rssa3'] = final_estimated_fp_ds[['rssa31','rssa32','rssa33','rssa34','rssa35',]].max(axis=1)
  final_estimated_fp_ds['rssa4'] = final_estimated_fp_ds[['rssa41','rssa42','rssa43','rssa44','rssa45',]].max(axis=1)
  final_estimated_fp_ds['rssa5'] = final_estimated_fp_ds[['rssa51','rssa52','rssa53','rssa54','rssa55',]].max(axis=1)
  final_estimated_fp_ds['rssa6'] = final_estimated_fp_ds[['rssa61','rssa62','rssa63','rssa64','rssa65',]].max(axis=1)
  final_estimated_fp_ds_new = final_estimated_fp_ds.drop(columns=['rssa11','rssa12','rssa13','rssa14','rssa15','rssa61','rssa21','rssa22','rssa23','rssa24','rssa25','rssa31','rssa32','rssa33','rssa34','rssa35','rssa41','rssa42','rssa43','rssa44','rssa45','rssa51','rssa52','rssa53','rssa54','rssa55','rssa62','rssa63','rssa64','rssa65'])
if(mean == True):
  final_estimated_fp_ds['rssa1'] = final_estimated_fp_ds[['rssa11','rssa12','rssa13','rssa14','rssa15',]].mean(axis=1)
  final_estimated_fp_ds['rssa2'] = final_estimated_fp_ds[['rssa21','rssa22','rssa23','rssa24','rssa25',]].mean(axis=1)
  final_estimated_fp_ds['rssa3'] = final_estimated_fp_ds[['rssa31','rssa32','rssa33','rssa34','rssa35',]].mean(axis=1)
  final_estimated_fp_ds['rssa4'] = final_estimated_fp_ds[['rssa41','rssa42','rssa43','rssa44','rssa45',]].mean(axis=1)
  final_estimated_fp_ds['rssa5'] = final_estimated_fp_ds[['rssa51','rssa52','rssa53','rssa54','rssa55',]].mean(axis=1)
  final_estimated_fp_ds['rssa6'] = final_estimated_fp_ds[['rssa61','rssa62','rssa63','rssa64','rssa65',]].mean(axis=1)
  final_estimated_fp_ds_new = final_estimated_fp_ds.drop(columns=['rssa11','rssa12','rssa13','rssa14','rssa15','rssa61','rssa21','rssa22','rssa23','rssa24','rssa25','rssa31','rssa32','rssa33','rssa34','rssa35','rssa41','rssa42','rssa43','rssa44','rssa45','rssa51','rssa52','rssa53','rssa54','rssa55','rssa62','rssa63','rssa64','rssa65'])

if(min == True):
  final_estimated_fp_ds['rssa1'] = final_estimated_fp_ds[['rssa11','rssa12','rssa13','rssa14','rssa15',]].min(axis=1)
  final_estimated_fp_ds['rssa2'] = final_estimated_fp_ds[['rssa21','rssa22','rssa23','rssa24','rssa25',]].min(axis=1)
  final_estimated_fp_ds['rssa3'] = final_estimated_fp_ds[['rssa31','rssa32','rssa33','rssa34','rssa35',]].min(axis=1)
  final_estimated_fp_ds['rssa4'] = final_estimated_fp_ds[['rssa41','rssa42','rssa43','rssa44','rssa45',]].min(axis=1)
  final_estimated_fp_ds['rssa5'] = final_estimated_fp_ds[['rssa51','rssa52','rssa53','rssa54','rssa55',]].min(axis=1)
  final_estimated_fp_ds['rssa6'] = final_estimated_fp_ds[['rssa61','rssa62','rssa63','rssa64','rssa65',]].min(axis=1)
  final_estimated_fp_ds_new = final_estimated_fp_ds.drop(columns=['rssa11','rssa12','rssa13','rssa14','rssa15','rssa61','rssa21','rssa22','rssa23','rssa24','rssa25','rssa31','rssa32','rssa33','rssa34','rssa35','rssa41','rssa42','rssa43','rssa44','rssa45','rssa51','rssa52','rssa53','rssa54','rssa55','rssa62','rssa63','rssa64','rssa65'])

final_estimated_fp_ds_new

"""# **Positioning Dory**"""

X = final_estimated_fp_ds_new.drop(columns = ['x','y', 'index']);
X = X.to_numpy()
#X.shape

#Computing cosine similarity between Dory's RSSI vector and the fingerprint dataset
from sklearn.metrics.pairwise import cosine_similarity
dory_rssi = [-57,-63,-58,-64,-63,-66]
similarity = []
for i in range(0,len(X)):
  similarity.append(cosine_similarity([X[i]], [dory_rssi]))
similarity

max_index = np.argmax(similarity)
pos_x = final_estimated_fp_ds_new.loc[final_estimated_fp_ds_new['index'] == max_index ,'x'].values[0]
pos_y = final_estimated_fp_ds_new.loc[final_estimated_fp_ds_new['index'] == max_index ,'y'].values[0]
result =(pos_x , pos_y)
print("Dory's position: ",result)

from google.colab import files

final_estimated_fp_ds.to_csv('final_estimated_fp_ds.csv', encoding = 'utf-8-sig') 
files.download('final_estimated_fp_ds.csv')
final_estimated_fp_ds_new.to_csv('final_estimated_fp_ds_new.csv', encoding = 'utf-8-sig') 
files.download('final_estimated_fp_ds_new.csv')